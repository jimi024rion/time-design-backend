openapi: 3.1.1

info:
  title: ToDo API
  summary: 練習用のAPI仕様書
  description: |
    API仕様書の練習用に作成した文書です。\
    なので、本仕様書で定義するエンドポイントや連絡先はでたらめです。
  termsOfService: http://example.com/teams
  contact:
    name: ToDo support
    url: http://www.example.com/support
    email: todo@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema

servers:
  - url: "http://localhost:{port}"
    description: local
    variables:
      port:
        enum:
          - "8080"
          - "3000"
        default: "3000"
        description: Port number
  # - url: https://41cb6l9dq5.execute-api.ap-northeast-1.amazonaws.com
  #   description: dev

security:
  - CognitoAuth: []

tags:
  - name: todo
    description: ToDoの処理に関連するAPI

paths:
  /todos:
    get:
      summary: ToDo一覧取得
      description: 指定したユーザーのToDoリストを取得する。
      operationId: getTodoList
      parameters:
        - $ref: "#/components/parameters/userId"
      tags:
        - todo
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetToDoListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - todo
      summary: ToDo新規作成
      description: 新しいToDoアイテムを作成しデータベースに追加する。
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateToDoRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateToDoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /todos/{todo_id}:
    patch:
      tags:
        - todo
      summary: ToDo更新
      description: 指定されたToDoの詳細情報を更新する。
      operationId: updateTodo
      parameters:
        - $ref: "#/components/parameters/todoId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateToDoRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateToDoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - todo
      summary: ToDo削除
      description: 指定されたToDoをデータベースから削除する。
      operationId: deleteTodo
      parameters:
        - $ref: "#/components/parameters/todoId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - todo
      summary: ToDoステータス更新
      description: 指定されたToDoの完了ステータスを更新する。
      operationId: updateTodoStatus
      parameters:
        - $ref: "#/components/parameters/todoId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateToDoStatusRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  parameters:
    userId:
      name: user_id
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/UserId"
    todoId:
      name: todo_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ToDoId"

  schemas:
    # 属性
    ToDoId:
      type: string
      format: uuid
      description: ToDo ID
    UserId:
      type: string
      format: uuid
      description: ユーザーID
    Title:
      type: string
      description: ToDoのタイトル
      example: "宿題"
    Done:
      type: boolean
      description: ToDoが完了してるかどうか
      example: false

    # モデル
    ToDoItem:
      type: object
      description: ToDoアイテム
      required:
        - todo_id
        - title
        - done
      properties:
        todo_id:
          $ref: "#/components/schemas/ToDoId"
        title:
          $ref: "#/components/schemas/Title"
        done:
          $ref: "#/components/schemas/Done"

    # リクエスト/レスポンス
    GetToDoListResponse:
      type: array
      items:
        $ref: "#/components/schemas/ToDoItem"
    CreateToDoRequest:
      type: object
      description: ToDo作成リクエスト
      required:
        - title
      properties:
        title:
          $ref: "#/components/schemas/Title"
    CreateToDoResponse:
      $ref: "#/components/schemas/ToDoItem"
    UpdateToDoRequest:
      type: object
      description: ToDo作成リクエスト
      required:
        - title
      properties:
        title:
          $ref: "#/components/schemas/Title"
    UpdateToDoResponse:
      $ref: "#/components/schemas/ToDoItem"
    UpdateToDoStatusRequest:
      type: object
      description: ToDoステータス更新リクエスト
      required:
        - done
      properties:
        done:
          $ref: "#/components/schemas/Done"

  responses:
    NoContent: # 204
      description: No Content
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No Content"
    BadRequest: # 400
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad Request"
    Unauthorized: # 401
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFound: # 404
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
    InternalServerError: # 500
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal Server Error"

  securitySchemes:
    CognitoAuth:
      type: apiKey
      name: Cognito-Auth-Header
      in: header
